import openai
from dotenv import dotenv_values
import json
import spotipy
import argparse

# Load environment variables
config = dotenv_values(".env")
for key in ["OPENAI_API_KEY", "SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "REDIRECT_URI"]:
    if key not in config:
        print(f"Missing {key} in .env file")
        exit(1)


openai.api_key = config["OPENAI_API_KEY"]
GPT3 = "gpt-3.5-turbo"
GPT4 = "gpt-4"

# Command line arguments
parser = argparse.ArgumentParser(
    description='Command line interface for generating playlists')
parser.add_argument('-p', type=str, default="classic rock and roll workout music", help="The prompt for the playlist")
parser.add_argument('-n', type=int, default=8,
                    help="The number of songs in the playlist")
parser.add_argument('-t', type=str, help="The title of the playlist you are creating")
parser.add_argument('-public', action='store_true', help="Flag to indicate if the playlist is public")
args = parser.parse_args()

if args.n < 1 or args.n > 50:
    print("Number of songs must be between 1 and 50")
    exit(1)

# main function for openAI playlist generation
def generate_playlist(prompt, count=10):

    # one shot example to assist in returning the correct amount and correct format
    example_correct_json = """
  [
    {"song": "Someone Like You", "artist": "Adele"},
    {"song": "Let Her Go", "artist": "Passenger"},
    {"song": "Tears in Heaven", "artist": "Eric Clapton"},
    {"song": "Say Something", "artist": "A Great Big World, Christina Aguilera"},
    {"song": "Fix You", "artist": "Coldplay"},
    {"song": "My Heart Will Go On", "artist": "CÃ©line Dion"},
    {"song": "The Sound of Silence", "artist": "Simon & Garfunkel"},
    {"song": "Hurt", "artist": "Johnny Cash"},
    {"song": "See You Again", "artist": "Wiz Khalifa ft. Charlie Puth"},
    {"song": "Stay", "artist": "Rihanna ft. Mikky Ekko"},
  ]
  """
    
    messages = [
        # setting the scene for the assistant
        {"role": "system", "content": """You are a helpful playlist generating assistant. You should generate a list of songs and their artists according to a text prompt. You should return a JSON array, where each element follows this format: {"song": <song_title>, "artist": <artist_name>}."""},
        # one shot example:
        {"role": "user", "content": """Generate a playlist of 10 songs based on this prompt: super sad songs to drive with the windows down to."""},
        {"role": "assistant", "content": example_correct_json},
        # actual prompt filled in with command line arguments
        {"role": "user", "content": f"Generate a playlist of {count} songs based on this prompt: {prompt}"}
    ]

    response = openai.chat.completions.create(
        model=GPT4,
        messages=messages,
        max_tokens=400,
    )

    return json.loads(response.choices[0].message.content)


# Spotify authentication
sp = spotipy.Spotify(
    auth_manager=spotipy.SpotifyOAuth(
        client_id=config["SPOTIFY_CLIENT_ID"],
        client_secret=config["SPOTIFY_CLIENT_SECRET"], redirect_uri=config["REDIRECT_URI"], scope="playlist-modify-private playlist-modify-public"
    )
)

current_user = sp.current_user()
assert current_user is not None


### Spotipy search, building list of song IDs to create playlist with ###
playlist = generate_playlist(args.p, args.n)
track_ids = []
for track in playlist:
    artist, song, = track["artist"], track["song"]
    advanced_query = f"artist:({artist}) track:({song})"
    basic_query = f"{artist} {song}"

    for query in [advanced_query, basic_query]:
        search = sp.search(q=query, type="track", limit=10)
        search_results = search["tracks"]["items"]

        if not search_results or search_results[0]["popularity"] < 30:
            continue
        else:
            track_ids.append(search_results[0]["id"])
            print(f"Adding {search_results[0]['name']}")
            break

# Creating the playlist
playlist_name = args.t if args.t else f"{args.p} generated by GPT-4"
new_playlist = sp.user_playlist_create(
    current_user["id"],
    name=playlist_name,
    public=args.public,
    description=f"Generated by GPT-4"
)

sp.user_playlist_add_tracks(current_user["id"], new_playlist["id"], track_ids)
